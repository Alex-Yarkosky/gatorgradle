plugins {
    id "maven"
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "0.9.7"
    id "ru.vyarus.quality" version "2.4.0"
}

ext.gitVersioner = [
        /* defaultBranch           : "master",  // default "master" */
        stableBranches          : ["master"], // the feature branch postfix (-dm4(6)) will not be appended on stable branches
        yearFactor              : 500, 	  // default "1000", increasing every 8.57h
        snapshotEnabled         : false,      // default false, the "-SNAPSHOT" postfix
        localChangesCountEnabled: false,       // default false, the (<commitCount>) before -SNAPSHOT
]
// import the script which runs the version generation
apply from: "versioner.gradle"

group = "${artifact_group}"
version = "${artifact_release}.${gitVersionName}"

println("\u001B[1;36mVERSION ${version}\u001B[0m")

pluginBundle {
    website = "http://github.com/gatored/gatorgradle"
    vcsUrl = "https://github.com/gatored/gatorgradle"
    description = "Gradle plugin for integrating the grading tool GatorGrader as a runnable, configurable task"
    tags = ["grading", "allegheny", "gatorgrader", "mdl", "proselint"]

    plugins {
        gatorgradle {
            id = "${artifact_name}"
            description = "Integrates GatorGrader checking as a task, as used at Allegheny College."
            displayName = "GatorGradle"
      }
  }
}

gradlePlugin {
    plugins {
        gatorgradle {
            id = "${artifact_name}"
            implementationClass = "org.gatorgradle.GatorGradlePlugin"
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${System.properties['user.home']}/.m2/repository")
        }
    }
}

// send javadocs to docs folder
tasks.findByName("javadoc").destinationDir = file("docs")


quality {
    checkstyleVersion = "8.1"

    // disable PMD for now (100+ issues to fix)
    pmd = false;

    findbugsLevel = "low"
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

/* dependencies {
    compile gradleApi()
    testCompile gradleTestKit()
} */

/* test {
    // always run tests
    outputs.upToDateWhen { false }

    // turn on console logging
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        stackTraceFilters "entryPoint"
    }

} */

/* task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
} */

// add classpath file to test runtime classpath
/* dependencies {
    testRuntime files(createClasspathManifest)
} */

tasks.whenTaskAdded { task ->
    if (task.getName().contains("PluginMavenPublication")) {
        task.setDependsOn([])
        task.setMustRunAfter([])
        task.setShouldRunAfter([])
        task.setEnabled(false)
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
