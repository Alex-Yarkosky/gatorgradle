plugins {
    id "maven"
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "0.9.7"
    id "ru.vyarus.quality" version "2.4.0"
}

ext.gitVersioner = [
        /* defaultBranch           : "master",  // default "master" */
        stableBranches          : ["master"], // the feature branch postfix (-dm4(6)) will not be appended on stable branches
        yearFactor              : 500, 	  // default "1000", increasing every 8.57h
        snapshotEnabled         : false,      // default false, the "-SNAPSHOT" postfix
        localChangesCountEnabled: false,       // default false, the (<commitCount>) before -SNAPSHOT
]
// import the script which runs the version generation
apply from: "versioner.gradle"

group = "${artifact_group}"
version = "${artifact_release}.${gitVersionName}"

println("\u001B[1;36mVERSION ${version}\u001B[0m")

pluginBundle {
    website = "http://github.com/gatored/gatorgradle"
    vcsUrl = "https://github.com/gatored/gatorgradle"
    description = "Gradle plugin for integrating the grading tool GatorGrader as a runnable, configurable task"
    tags = ["grading", "allegheny", "gatorgrader", "mdl", "proselint"]

    plugins {
        gatorgradle {
            id = "${artifact_name}"
            description = "Integrates GatorGrader checking as a task, as used at Allegheny College."
            displayName = "GatorGradle"
      }
  }
}

gradlePlugin {
    plugins {
        gatorgradle {
            id = "${artifact_name}"
            implementationClass = "org.gatorgradle.GatorGradlePlugin"
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${System.properties['user.home']}/.m2/repository")
        }
    }
}

def getBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return branch
}

def switchToBranch(String branch) {
    def err = false
    def proc = "git checkout ${branch}".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line ->
        println line
        err = true
    }
    proc.waitFor()
    if(getBranch() != branch) {
        err = true
    }

    if(err) {
        throw new GradleException("Could not checkout ${branch}!")
    }
}

/* # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo >&2 "cannot $1: you have unstaged changes."
        git diff-files --name-status -r --ignore-submodules -- >&2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo >&2 "cannot $1: your index contains uncommitted changes."
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
        err=1
    fi */

// send javadocs to docs folder
tasks.findByName("javadoc").destinationDir = file("docs/${version}")


task CopyAndThen(type: Copy) {
   doFirst {
      println "this is before the actual copy"
   }
   println "copy"
   doLast {
      println "this is after the actual copy"
   }
}

task makeJavadocBadge(type: Copy) {

    def oldBranch = ""
    doFirst {
        println("running javadoc")
        oldBranch = getBranch()
        switchToBranch("gh-pages")
        println "switched branch to ${getBranch()}"
    }

    def filename = "docs-passing.svg"
    println "configuring"
    from "images"
    into  "docs/${version}"
    include filename
    rename filename, "docs-status-badge.svg"

    doLast {
        println "finished copy"
        println "on branch ${getBranch()}"
        switchToBranch(oldBranch)
        println "switched branch to ${getBranch()}"
    }
}

/* task publishJavadocs(type: GradleBuild) {
     tasks = ['clean', 'javadoc']
} */

quality {
    checkstyleVersion = "8.1"

    // disable PMD for now (100+ issues to fix)
    pmd = false;

    findbugsLevel = "low"
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

/* tasks.whenTaskAdded { task ->
    if (task.getName().contains("PluginMavenPublication")) {
        task.setDependsOn([])
        task.setMustRunAfter([])
        task.setShouldRunAfter([])
        task.setEnabled(false)
    }
} */

sourceCompatibility = 1.8
targetCompatibility = 1.8
